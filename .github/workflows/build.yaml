# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build naftis

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - id: osv-scan-app-table
        name: OSV check (table)
        continue-on-error: true
        run: ./osv-scanner --sbom bom.json --skip-git > ./osv.txt

      - id: osv-scan-app-json
        name: OSV check (json)
        continue-on-error: true
        run: ./osv-scanner --sbom bom.json --format json --skip-git > ./osv.json

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            migfe/naftis:latest
            migfe/naftis:0.0.1
          build-args: JAR_FILE=target/naftis-0.0.1-SNAPSHOT.jar

      - id: osv-scan-docker-table
        name: OSV check docker image (table)
        continue-on-error: true
        run: ./osv-scanner --docker migfe/naftis:latest --skip-git > ./osv-docker-image.txt

      - id: osv-scan-docker-json
        name: OSV check docker image (json)
        continue-on-error: true
        run: ./osv-scanner --docker migfe/naftis:latest --format json --skip-git > ./osv-docker-image.json

      # create SBOM using anchore/Syft (corresponds to docker sbom)
      - id: docker-sbom
        name: Docker image SBOM using anchore/Syft
        uses: anchore/sbom-action@v0
        with:
          image: migfe/naftis:latest
          format: cyclonedx-json
          output-file: ./docker-sbom/bom.json

      # analyse sbom generated using anchore/Syft
      - id: osv-scan-docker-sbom-table
        name: OSV check SBOM generated using docker sbom (table)
        continue-on-error: true
        run: ./osv-scanner --sbom ./docker-sbom/bom.json --skip-git > ./docker-sbom/osv.txt

      # analyse sbom generated using anchore/Syft
      - id: osv-scan-docker-sbom-json
        name: OSV check SBOM generated using docker sbom  (json)
        continue-on-error: true
        run: ./osv-scanner --sbom ./docker-sbom/bom.json --format json --skip-git > ./docker-sbom/osv.json

      # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

      - name: Commit and push SBOMs and OSVs
        run: |
          git config --global user.name 'Michael Gfeller'
          git config --global user.email '1214008+mgfeller@users.noreply.github.com'
          git add ./bom.json
          git add ./bom.xml
          git add ./osv.txt
          git add ./osv.json
          git add ./docker-sbom/bom.json
          git add ./docker-sbom/osv.txt
          git add ./docker-sbom/osv.json
          git commit -m "Updated SBOM and OSV"
          git push

      - id: osv-scanner-status-docker-image
        name: Checking exit status of OSV scan of docker image - fails if vulnerabilities are found
        if: steps.osv-scan-docker-table.outcome != 'success' || steps.osv-scan-docker-json.outcome != 'success'
        run: exit 1

      - id: osv-scanner-status-app
        name: Checking exit status of OSV scan of application - fails if vulnerabilities are found
        if: steps.osv-scan-app-table.outcome != 'success' || steps.osv-scan-app-json.outcome != 'success'
        run: exit 1

      - id: osv-scanner-status-docker-sbom
        name: Checking exit status of OSV scan of application - fails if vulnerabilities are found
        if: steps.osv-scan-docker-sbom-table.outcome != 'success' || steps.osv-scan-docker-sbom-json.outcome != 'success'
        run: exit 1